;; include/macros.lisp

(defmacro def-struct (name &rest slots)
  (let ((constructor (intern (concatenate 'string "make-" (symbol-name name))))
        (accessor (intern (concatenate 'string (symbol-name name) "-slot")))
        (struct-tag (intern (concatenate 'string ":" (symbol-name name)))))
    (let ((args (mapcar (lambda (slot)
                          (if (listp slot)
                              (let ((slot-name (car slot))
                                    (default (cadr slot)))
                                `(,slot-name (getf &key ,slot-name ,default)))
                              `(,slot (getf &key ,slot))))
                        slots)))
      `(progn
         (defun ,constructor (&key ,@(mapcar (lambda (slot) (if (listp slot) (car slot) slot)) slots))
           ,(format nil "Create a new ~A structure" name)
           (list ',struct-tag ,@(mapcar (lambda (slot)
                                          (if (listp slot)
                                              `(cons ',(car slot) ,(car slot))
                                              `(cons ',slot ,slot)))
                                        slots)))
         (defun ,accessor (obj slot)
           ,(format nil "Access the ~A structure's slot" name)
           (unless (eq (car obj) ',struct-tag)
             (error "Not a ~A structure: ~S" ',name obj))
           (cdr (assoc slot (cdr obj))))))))

(defmacro with-slots (slots obj &body body)
  `(let ,(mapcar (lambda (slot) `(,slot (,obj '-slot ',slot))) slots)
     ,@body))